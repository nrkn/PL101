var musCompiler = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "repeat": parse_repeat,
        "startlist": parse_startlist,
        "endlist": parse_endlist,
        "par": parse_par,
        "parsubs": parse_parsubs,
        "expression": parse_expression,
        "notes": parse_notes,
        "digit": parse_digit,
        "integer": parse_integer,
        "whitespace": parse_whitespace,
        "comment": parse_comment,
        "ignore": parse_ignore,
        "noteletter": parse_noteletter,
        "accidental": parse_accidental,
        "note": parse_note,
        "numberedNote": parse_numberedNote,
        "rest": parse_rest,
        "element": parse_element,
        "modifier": parse_modifier,
        "tempo": parse_tempo,
        "octave": parse_octave,
        "len": parse_len,
        "shiftoctave": parse_shiftoctave,
        "define": parse_define,
        "defines": parse_defines,
        "subsequence": parse_subsequence
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "expression";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_repeat() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 42) {
          result0 = "*";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"*\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_ignore();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_ignore();
          }
          if (result1 !== null) {
            result2 = parse_integer();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_ignore();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_ignore();
              }
              if (result3 !== null) {
                result4 = parse_expression();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, count, expr) { 
                  return {
                    tag: 'repeat',
                    count: count,
                    section: expr
                  }; 
                })(pos0, result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_startlist() {
        var result0, result1, result2, result3;
        var pos0;
        
        pos0 = pos;
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 40) {
            result1 = "(";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"(\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_ignore();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_ignore();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_endlist() {
        var result0, result1, result2, result3;
        var pos0;
        
        pos0 = pos;
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 41) {
            result1 = ")";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\")\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_ignore();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_ignore();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_par() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_startlist();
        if (result0 !== null) {
          result1 = parse_expression();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_parsubs();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_parsubs();
            }
            if (result2 !== null) {
              result3 = parse_endlist();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, start, rest) { 
                  var result = [ start ].concat( rest ); 
                  
                  if( result.length === 1 ) {
                    return result[ 0 ];
                  }
                  
                  var par = {
                        tag: 'par',
                        left: {},
                        right: {}
                      },
                      lastPar = par,
                      thisPar = {};
                  
                  for( var i = 0; i < result.length; i++ ) {
                    if( i < result.length - 1 ) {
                      thisPar = lastPar;
                      lastPar.left = result[ i ];
                      lastPar = lastPar.right = {
                        tag: 'par',
                        left: {},
                        right: {}
                      };
                    } else {
                      thisPar.right = result[ i ];
                    }
                  }     
                  
                  return par;        
                })(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_parsubs() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 44) {
            result1 = ",";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\",\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_ignore();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_ignore();
            }
            if (result2 !== null) {
              result3 = parse_expression();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) { return expr; })(pos0, result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_expression() {
        var result0;
        
        result0 = parse_par();
        if (result0 === null) {
          result0 = parse_repeat();
          if (result0 === null) {
            result0 = parse_notes();
          }
        }
        return result0;
      }
      
      function parse_notes() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = [];
        result1 = parse_subsequence();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_subsequence();
        }
        if (result0 !== null) {
          result0 = (function(offset, subsequences) {
                  var result = [],
                      initial = {
                        modifier: { arg: 'n' },
                        octave: { arg: 4 },
                        len: { arg: 1 },
                        tempo: { arg: 120 }                
                      };
                  
                  for( var i = 0; i < subsequences.length; i++ ) {
                    var subsequence = subsequences[ i ],
                        defines = subsequence.defines,
                        elements = subsequence.elements;
                        
                    //if the first element in the sequence has any undefineds, use the initial settings
                    if( i == 0 ) {
                      defines.modifier = defines.modifier ? defines.modifier : initial.modifier;
                      defines.octave = defines.octave ? defines.octave : initial.octave;
                      defines.len = defines.len ? defines.len : initial.len;
                      defines.tempo = defines.tempo ? defines.tempo : initial.tempo;              
                    } else {
                      //otherwise if an element has any undefined, copy them from the previous element
                      defines.modifier = defines.modifier ? defines.modifier : subsequences[ i  - 1 ].defines.modifier;
                      defines.octave = defines.octave ? defines.octave : subsequences[ i  - 1 ].defines.octave;
                      defines.len = defines.len ? defines.len : subsequences[ i  - 1 ].defines.len;
                      defines.tempo = defines.tempo ? defines.tempo : subsequences[ i  - 1 ].defines.tempo;
                    }
                    
                    var msPerBeat = 60000 / ( defines.tempo.arg / 4 );
                    
                    for( var e = 0; e < elements.length; e++ ) {
                      var element = elements[ e ],
                          musElement = {
                            tag: element.tag,
                            dur: msPerBeat / ( element.duration !== '' ? element.duration : defines.len.arg )
                          };
                          
                      //each . in the mml format extends the duration by half again
                      if( element.extend > 0  ) {
                        musElement.dur *= Math.pow( 1.5, element.extend );
                      }
        
                      if( element.tag === 'note' ) {
                        if( defines.shiftoctave ) {
                          defines.octave.arg += ( defines.shiftoctave.arg === '<' ? -1 : 1 );
                          defines.shiftoctave = null;
                        }
                        
                        defines.octave.arg = ( defines.octave.arg < 0 ) ? 0 : ( defines.octave.arg > 6 ) ? 6 : defines.octave.arg;
                        
                        var octave = element.octave !== undefined ? element.octave : defines.octave.arg;
                        
                        musElement.pitch = element.note + element.accidental + octave; 
                        //legato
                        if( [ 'l', 'f', 'b' ].indexOf( defines.modifier.arg ) !== -1 ) {
                          result.push( musElement );
                        } else {          
                          //staccato or normal
                          var mod = defines.modifier.arg === 's' ? 0.75 : 0.875,
                              restMod = 1 - mod;
                              rest = {
                                tag: 'rest',
                                dur: musElement.dur * restMod
                              };
                          musElement.dur *= mod;
                          result.push( musElement );
                          result.push( rest );                
                        }
                      } else {
                        result.push( musElement );
                      }               
                    }
                  }
                  
                  if( result.length === 0 ) {
                    return undefined;
                  }
                  
                  if( result.length === 1 ) {
                    return result[ 0 ];
                  }
        
                  var mus = {
                        tag: 'seq',
                        left: {},
                        right: {}
                      },
                      lastSeq = mus,
                      thisSeq = {};
                  
                  for( var i = 0; i < result.length; i++ ) {
                    if( i < result.length - 1 ) {
                      thisSeq = lastSeq;
                      lastSeq.left = result[ i ];
                      lastSeq = lastSeq.right = {
                        tag: 'seq',
                        left: {},
                        right: {}
                      };
                    } else {
                      thisSeq.right = result[ i ];
                    }
                  }     
                  
                  return mus;
                })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_digit() {
        var result0;
        
        if (/^[0-9]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        return result0;
      }
      
      function parse_integer() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result1 = parse_digit();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_digit();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, digits) { return parseInt( digits.join( '' ), 10 ); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_whitespace() {
        var result0;
        
        if (/^[ \t\r\n]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t\\r\\n]");
          }
        }
        return result0;
      }
      
      function parse_comment() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 2) === ";;") {
          result0 = ";;";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\";;\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[^\r\n]/.test(input.charAt(pos))) {
            result2 = input.charAt(pos);
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[^\\r\\n]");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[^\r\n]/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[^\\r\\n]");
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_ignore() {
        var result0;
        
        result0 = parse_whitespace();
        if (result0 === null) {
          result0 = parse_comment();
        }
        return result0;
      }
      
      function parse_noteletter() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[a-g]/i.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-g]i");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, letter) { return letter.toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_accidental() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[+#\-]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[+#\\-]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, sign) { return sign === '+' || sign === '#' ? '#' : 'b'; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_note() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        result0 = parse_numberedNote();
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = [];
          result1 = parse_ignore();
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_ignore();
          }
          if (result0 !== null) {
            result1 = parse_noteletter();
            if (result1 !== null) {
              result2 = parse_accidental();
              result2 = result2 !== null ? result2 : "";
              if (result2 !== null) {
                result3 = parse_integer();
                result3 = result3 !== null ? result3 : "";
                if (result3 !== null) {
                  result4 = [];
                  if (input.charCodeAt(pos) === 46) {
                    result5 = ".";
                    pos++;
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\".\"");
                    }
                  }
                  while (result5 !== null) {
                    result4.push(result5);
                    if (input.charCodeAt(pos) === 46) {
                      result5 = ".";
                      pos++;
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\".\"");
                      }
                    }
                  }
                  if (result4 !== null) {
                    result5 = [];
                    result6 = parse_ignore();
                    while (result6 !== null) {
                      result5.push(result6);
                      result6 = parse_ignore();
                    }
                    if (result5 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, noteletter, accidental, duration, extend) { 
                    return { 
                      tag: 'note',
                      note: noteletter, 
                      accidental: accidental,
                      duration: duration,
                      extend: extend.length
                    };
                  })(pos0, result0[1], result0[2], result0[3], result0[4]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_numberedNote() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          if (input.substr(pos, 1).toLowerCase() === "n") {
            result1 = input.substr(pos, 1);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"n\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_integer();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_ignore();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_ignore();
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, num) {
                  num = ( num < 0 ) ? 0 : ( num > 84 ) ? 84 : num;
                  
                  if( num === 0 ) {
                    return {
                      tag: 'rest',
                      duration: '',
                      extend: 0
                    };
                  }          
                  
                  var notes =       'ccdeeffgaabb',
                      accidentals = ' # b  # b b ';
                      noteletter = ( num % 12 == 0 ) ? 'b' : notes[ ( num % 12 ) - 1 ],
                      accidental = ( num % 12 == 0 ) ? ' ' : accidentals[ ( num % 12 ) - 1 ],
                      octave = Math.floor( ( num - 1 ) / 12 );
                      
                  var result = {
                    tag: 'note',
                    note: noteletter, 
                    accidental: accidental === ' ' ? '' : accidental,
                    duration: '',
                    octave: octave
                  };          
        
                  return result;          
                })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_rest() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          if (/^[pr]/i.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[pr]i");
            }
          }
          if (result1 !== null) {
            result2 = parse_integer();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = [];
              if (input.charCodeAt(pos) === 46) {
                result4 = ".";
                pos++;
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("\".\"");
                }
              }
              while (result4 !== null) {
                result3.push(result4);
                if (input.charCodeAt(pos) === 46) {
                  result4 = ".";
                  pos++;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\".\"");
                  }
                }
              }
              if (result3 !== null) {
                result4 = [];
                result5 = parse_ignore();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_ignore();
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, duration, extend) {
                  return {
                    tag: 'rest',
                    duration: duration,
                    extend: extend.length
                  };
                })(pos0, result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_element() {
        var result0;
        
        result0 = parse_note();
        if (result0 === null) {
          result0 = parse_rest();
        }
        return result0;
      }
      
      function parse_modifier() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          if (input.substr(pos, 1).toLowerCase() === "m") {
            result1 = input.substr(pos, 1);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"m\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_ignore();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_ignore();
            }
            if (result2 !== null) {
              if (/^[fblsn]/i.test(input.charAt(pos))) {
                result3 = input.charAt(pos);
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("[fblsn]i");
                }
              }
              if (result3 !== null) {
                result4 = [];
                result5 = parse_ignore();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_ignore();
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, arg) {  
                  return {
                    tag: 'modifier',
                    arg: arg
                  };
                })(pos0, result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tempo() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          if (input.substr(pos, 1).toLowerCase() === "t") {
            result1 = input.substr(pos, 1);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"t\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_ignore();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_ignore();
            }
            if (result2 !== null) {
              result3 = parse_integer();
              if (result3 !== null) {
                result4 = [];
                result5 = parse_ignore();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_ignore();
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, arg) {
                  return {
                    tag: 'tempo',
                    arg: arg
                  };
                })(pos0, result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_octave() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          if (input.substr(pos, 1).toLowerCase() === "o") {
            result1 = input.substr(pos, 1);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"o\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_ignore();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_ignore();
            }
            if (result2 !== null) {
              if (/^[0-6]/.test(input.charAt(pos))) {
                result3 = input.charAt(pos);
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-6]");
                }
              }
              if (result3 !== null) {
                result4 = [];
                result5 = parse_ignore();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_ignore();
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, arg) {
                  return {
                    tag: 'octave',
                    arg: parseInt( arg, 10 )
                  }
                })(pos0, result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_len() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          if (input.substr(pos, 1).toLowerCase() === "l") {
            result1 = input.substr(pos, 1);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"l\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_ignore();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_ignore();
            }
            if (result2 !== null) {
              result3 = parse_integer();
              if (result3 !== null) {
                result4 = [];
                result5 = parse_ignore();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_ignore();
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, arg) {
                  return {
                    tag: 'len',
                    arg: arg
                  };
                })(pos0, result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_shiftoctave() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          if (/^[<>]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[<>]");
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_ignore();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_ignore();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, arg) {
                return {
                  tag: 'shiftoctave',
                  arg: arg
                };
              })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_define() {
        var result0;
        
        result0 = parse_modifier();
        if (result0 === null) {
          result0 = parse_tempo();
          if (result0 === null) {
            result0 = parse_octave();
            if (result0 === null) {
              result0 = parse_len();
              if (result0 === null) {
                result0 = parse_shiftoctave();
              }
            }
          }
        }
        return result0;
      }
      
      function parse_defines() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = [];
        result1 = parse_define();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_define();
        }
        if (result0 !== null) {
          result0 = (function(offset, defines) {
                  var result = {};
                
                  
                  for( var i = 0; i < defines.length; i++ ) {
                    result[ defines[ i ].tag ] = defines[ i ];
                  }
                  
                  
                  return result;
                })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_subsequence() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_defines();
        if (result0 !== null) {
          result2 = parse_element();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_element();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, defines, elements) { 
                  return {
                    tag: 'subsequence',
                    defines: defines,
                    elements: elements
                  };
                })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();

musCompiler.compile = musCompiler.parse;