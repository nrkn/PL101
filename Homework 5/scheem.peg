start =
    ignore* expr: expression ignore*
        { return expr; }

validchar = 
    [0-9a-zA-Z!$%&*+\-./:<=>?@^_~|]
    
atom =
    decimal
  / integer
  / bool
  / char
  / str: string
        {
          var chars = [],
              charLits = /[0-9a-zA-Z!$%&*+\-.\/:<=>?@^_~|]/,
              special = {
                ' '  : '#\\space',
                '\t' : '#\\tab',
                '\n' : '#\\linefeed',
                '\r' : '#\\return'
              };
              
          for( var i = 1; i < str.length - 1; i++ ) {
            var c = str.charAt( i );
            if( c.match( charLits ) ) {
              chars.push( "#\\" + c );
              continue;
            }
            
            if( special[ c ] !== undefined ) {
              chars.push( special[ c ] );
              continue;
            }
            
            chars.push( '#\\' + c.charCodeAt( 0 ).toString( 16 ) );      
          }
          
          return chars;        
        }
  / chars: validchar+
        { return chars.join( '' ); }     

integer =
    digits: [0-9]+
        { return Number( digits.join( '' ) ); }

decimal =
    sign: [+-]? number: integer [.] decimals: integer
        { return Number( number + '.' + decimals ) * ( sign === '-' ? -1 : 1 ); }
  / sign: [+-]? [.] decimals: integer
        { return Number( '0.' + decimals ) * ( sign === '-' ? -1 : 1 ); }    
  / sign: [+-]? number: integer
        { return number * ( sign === '-' ? -1 : 1 ); }   

bool =
    '#t'
  / '#f'

hex =
    [A-Fa-f0-9]
  
char =
    '#\\#'
  / '#\\space' 
  / '#\\newline'
  / '#\\tab'
  / '#\\linefeed'
  / '#\\return'
  / '#\\' first: hex second: hex
      { return '#\\' + first + second; }
  / '#\\' first: hex second: hex third: hex
      { return '#\\' + first + second + third; }
  / '#\\' first: hex second: hex third: hex fourth: hex
      { return '#\\' + first + second + third + fourth; }
  / '#\\' identifier: validchar
      { return '#\\' + identifier; }         
       
string  = 
    '"' '"' 
        { return '""'; }
  / '"' chars:schars '"' 
        { return '"' + chars + '"'; }

schars
  = chars:schar+ { return chars.join(""); }

schar
  = [^"\\\0-\x1F\x7f]
  / '\\"' { return '"'; }
  / "\\\\" { return "\\"; }
  / "\\/" { return "/"; }
  / "\\b" { return "\b"; }
  / "\\f" { return "\f"; }
  / "\\n" { return "\n"; }
  / "\\r" { return "\r"; }
  / "\\t" { return "\t"; }
  / "\\u" h1:hex h2:hex h3:hex h4:hex {
      return String.fromCharCode(parseInt("0x" + h1 + h2 + h3 + h4));
    }  
  
whitespace =
    [ \t\r\n]
 
comment =
    ';;' [^\r\n]*

ignore =
    whitespace
  / comment        

atomlistelement =
    ignore+ element: atom
        { return element; }

atomlist =
    first: atom elements: atomlistelement*
        { return [ first ].concat( elements ); }

startlist =
    ignore* "(" ignore* 
    
endlist =   
    ignore* ")" ignore* 

groupelement =
    group: group
        {  return [ group ]; }
  / atomlist: atomlist ignore*
        {  return atomlist; }
  / quote: quote ignore*
        {  return [ quote ]; }

group =
    startlist first: groupelement rest: groupelement* endlist
        {   
            var result = first;        
            for( var i = 0; i < rest.length; i++ ) {
              result = result.concat( rest[ i ] );
            }
            return result; 
         }

empty =   
    startlist endlist
        { return []; }    
         
quote = 
    "'" expr: expression    
        { return [ 'quote', expr ]; }

expression =
    atom
  / group
  / empty
  / quote